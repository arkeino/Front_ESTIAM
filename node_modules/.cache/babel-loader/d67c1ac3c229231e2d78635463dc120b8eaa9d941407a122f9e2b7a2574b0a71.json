{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../hooks/use-auth';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthGuard = props => {\n  _s();\n  const {\n    children\n  } = props;\n  const navigate = useNavigate();\n  const {\n    isAuthenticated\n  } = useAuth();\n  const [checked, setChecked] = useState(false);\n  const check = useCallback(() => {\n    if (!isAuthenticated) {\n      navigate('/login');\n    } else {\n      setChecked(true);\n    }\n  }, [isAuthenticated]);\n\n  // Only check on mount, this allows us to redirect the user manually when auth state changes\n  useEffect(() => {\n    check();\n  }, []);\n  if (!checked) {\n    return null;\n  }\n\n  // If got here, it means that the redirect did not occur, and that tells us that the user is\n  // authenticated / authorized.\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n_s(AuthGuard, \"EBWMES4GqWiVoCBBoA8YW5TILMw=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = AuthGuard;\nvar _c;\n$RefreshReg$(_c, \"AuthGuard\");","map":{"version":3,"names":["useCallback","useEffect","useState","useNavigate","useAuth","Fragment","_Fragment","jsxDEV","_jsxDEV","AuthGuard","props","_s","children","navigate","isAuthenticated","checked","setChecked","check","_c","$RefreshReg$"],"sources":["C:/Users/joiss/OneDrive/Bureau/users-managementteam/Front_ESTIAM/src/guards/auth-guard.tsx"],"sourcesContent":["import type { FC, ReactNode } from 'react';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../hooks/use-auth';\r\n\r\ninterface AuthGuardProps {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const AuthGuard: FC<AuthGuardProps> = (props) => {\r\n    const { children } = props;\r\n    const navigate = useNavigate();\r\n    const { isAuthenticated } = useAuth();\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    const check = useCallback(() => {\r\n        if (!isAuthenticated) {\r\n            navigate('/login');\r\n        } else {\r\n            setChecked(true);\r\n        }\r\n    }, [isAuthenticated]);\r\n\r\n    // Only check on mount, this allows us to redirect the user manually when auth state changes\r\n    useEffect(() => {\r\n        check();\r\n    }, []);\r\n\r\n    if (!checked) {\r\n        return null;\r\n    }\r\n\r\n    // If got here, it means that the redirect did not occur, and that tells us that the user is\r\n    // authenticated / authorized.\r\n\r\n    return <>{children}</>;\r\n};\r\n"],"mappings":";AACA,SAASA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACxD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,OAAO,QAAQ,mBAAmB;AAAC,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAM5C,OAAO,MAAMC,SAA6B,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACpD,MAAM;IAAEC;EAAS,CAAC,GAAGF,KAAK;EAC1B,MAAMG,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEW;EAAgB,CAAC,GAAGV,OAAO,CAAC,CAAC;EACrC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMe,KAAK,GAAGjB,WAAW,CAAC,MAAM;IAC5B,IAAI,CAACc,eAAe,EAAE;MAClBD,QAAQ,CAAC,QAAQ,CAAC;IACtB,CAAC,MAAM;MACHG,UAAU,CAAC,IAAI,CAAC;IACpB;EACJ,CAAC,EAAE,CAACF,eAAe,CAAC,CAAC;;EAErB;EACAb,SAAS,CAAC,MAAM;IACZgB,KAAK,CAAC,CAAC;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACF,OAAO,EAAE;IACV,OAAO,IAAI;EACf;;EAEA;EACA;;EAEA,oBAAOP,OAAA,CAAAF,SAAA;IAAAM,QAAA,EAAGA;EAAQ,gBAAG,CAAC;AAC1B,CAAC;AAACD,EAAA,CA3BWF,SAA6B;EAAA,QAErBN,WAAW,EACAC,OAAO;AAAA;AAAAc,EAAA,GAH1BT,SAA6B;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}